/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui_patient;

import ui.*;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import medicalsystem.*;
import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.HashMap;
import java.util.UUID;
import java.util.regex.Pattern;

/**
 *
 * @author Jianpeng Ji
 */
public class DiagnosisRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PatientsForDiagnosisJPanel
     */
    private JPanel userProcessContainer;
    private MedicalSystem admin;
    private User user;

    public DiagnosisRequestJPanel(JPanel userProcessContainer, MedicalSystem admin, User user) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.admin = admin;
        this.user = user;
        populateDoctorTable();
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddPatient = new javax.swing.JButton();
        btnViewPatient = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDoctors = new javax.swing.JTable();
        jButtonDiagnosisRequest = new javax.swing.JButton();
        jTextFieldHospital = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jTextFieldMinYear = new javax.swing.JTextField();
        lastNameLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        ageLabel = new javax.swing.JLabel();
        cityLabel = new javax.swing.JLabel();
        jTextFieldDoctorID = new javax.swing.JTextField();
        jTextFieldFirstName = new javax.swing.JTextField();
        jTextFieldCommunity = new javax.swing.JTextField();
        streetLine1Label = new javax.swing.JLabel();
        ageLabel1 = new javax.swing.JLabel();
        jTextFieldLastName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldMaxYear = new javax.swing.JTextField();

        btnAddPatient.setText("Add");
        btnAddPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPatientActionPerformed(evt);
            }
        });

        btnViewPatient.setText("View");
        btnViewPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPatientActionPerformed(evt);
            }
        });

        btnDelete.setForeground(new java.awt.Color(255, 0, 51));
        btnDelete.setText("Remove");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        setPreferredSize(new java.awt.Dimension(1200, 900));

        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tblDoctors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Doctor ID", "First Name", "Last Name", "Hospital", "Department", "Community", "Year Of Experience"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDoctors);

        jButtonDiagnosisRequest.setText("Request");
        jButtonDiagnosisRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDiagnosisRequestActionPerformed(evt);
            }
        });

        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        lastNameLabel.setText("Doctor ID");

        firstNameLabel.setText("First Name");

        ageLabel.setText("Last Name");

        cityLabel.setText("Hospital");

        jTextFieldDoctorID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDoctorIDActionPerformed(evt);
            }
        });

        streetLine1Label.setText("Community");

        ageLabel1.setText("Year of Experience");

        jLabel1.setText("-");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lastNameLabel)
                                    .addComponent(streetLine1Label)
                                    .addComponent(firstNameLabel))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldDoctorID, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ageLabel1)
                                        .addGap(36, 36, 36)
                                        .addComponent(jTextFieldMinYear, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextFieldMaxYear, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ageLabel)
                                            .addComponent(cityLabel))
                                        .addGap(26, 26, 26)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextFieldLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 847, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDiagnosisRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(189, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(streetLine1Label)
                            .addComponent(cityLabel)
                            .addComponent(jTextFieldHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstNameLabel)
                            .addComponent(ageLabel)
                            .addComponent(jTextFieldLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldDoctorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastNameLabel)
                            .addComponent(ageLabel1)
                            .addComponent(jTextFieldMinYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jTextFieldMaxYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonDiagnosisRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(278, 278, 278))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPatientActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblDoctors.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please selece a patient to view and update.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblDoctors.getModel();
        Patient selectedPatient = (Patient) model.getValueAt(selectedRowIndex, 0);

        ViewPatientJPanel viewPatient = new ViewPatientJPanel(userProcessContainer, admin, selectedPatient);
        userProcessContainer.add("ViewPatientJPanel", viewPatient);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnViewPatientActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblDoctors.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please selece a patient to remove.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblDoctors.getModel();
        Patient selectedPatient = (Patient) model.getValueAt(selectedRowIndex, 0);

        PatientDirectory patientDirectory = admin.patientDirectory;
        patientDirectory.deletePatient(selectedPatient);
        JOptionPane.showMessageDialog(this, "Remove Patient successfully.");
        populateDoctorTable();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPatientActionPerformed
        // TODO add your handling code here:
        AddPatientJPanel addPatient = new AddPatientJPanel(userProcessContainer, admin);
        userProcessContainer.add("AddPatientJPanel", addPatient);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnAddPatientActionPerformed

    private void jButtonDiagnosisRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDiagnosisRequestActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = tblDoctors.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please selece a doctor to remove.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblDoctors.getModel();
        Doctor selectedDoctor = (Doctor) model.getValueAt(selectedRowIndex, 0);
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        DiagnosisRequest request = new DiagnosisRequest(selectedDoctor.getId(), Integer.parseInt(user.getId()));
        request.setDate(dtf.format(now));
        request.setUid(UUID.randomUUID().toString());
        request.setStatus("request");
        admin.diagnosisRequestDirectory.addDiagnosisRequest(request);
        JOptionPane.showMessageDialog(this, "Submitted the application for diagnosis Successfully .");
    }//GEN-LAST:event_jButtonDiagnosisRequestActionPerformed

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed

        String community = jTextFieldCommunity.getText();
        String hospital = jTextFieldHospital.getText();
        String fristName = null;

        if (Pattern.compile("^[A-Za-z]+$").matcher(jTextFieldFirstName.getText()).matches()) {
            fristName = jTextFieldFirstName.getText();
        } else if (jTextFieldFirstName.getText() != null && jTextFieldFirstName.getText().trim().length() != 0) {
            JOptionPane.showMessageDialog(this, "Please input valid doctor first name.");
            return;
        }

        String lastName = null;
        if (Pattern.compile("^[A-Za-z]+$").matcher(jTextFieldLastName.getText()).matches()) {
            fristName = jTextFieldLastName.getText();
        } else if (jTextFieldLastName.getText() != null && jTextFieldLastName.getText().trim().length() != 0) {
            JOptionPane.showMessageDialog(this, "Please input valid doctor last name.");
            return;
        }
        int minYear = 0;
        if (Pattern.compile("^\\d{1,}$").matcher(jTextFieldMinYear.getText()).matches()) {
            minYear = Integer.parseInt(jTextFieldMinYear.getText());
        } else if (jTextFieldMinYear.getText() != null && jTextFieldMinYear.getText().trim().length() != 0) {
            JOptionPane.showMessageDialog(this, "Please input valid min year.");
            return;
        }

        int maxYear = 1000;
        if (Pattern.compile("^\\d{1,}$").matcher(jTextFieldMaxYear.getText()).matches()) {
            maxYear = Integer.parseInt(jTextFieldMaxYear.getText());
        } else if (jTextFieldMaxYear.getText() != null && jTextFieldMaxYear.getText().trim().length() != 0) {
            JOptionPane.showMessageDialog(this, "Please input valid max year.");
            return;
        }

        HashMap<Integer, Doctor> doctorMap = admin.doctorDirectory.getDoctorMap();
        ArrayList<Doctor> result = new ArrayList<Doctor>();

        String doctorID = jTextFieldDoctorID.getText();

        for (Doctor doctor : doctorMap.values()) {

            boolean flag = true;
            if (community != null && community.trim().length() != 0 && !community.equals(doctor.getCommunity())) {
                flag = false;
            }
            if (hospital != null && hospital.trim().length() != 0 && !hospital.equals(doctor.getHospitalName())) {
                flag = false;
            }
            if (fristName != null && fristName.trim().length() != 0 && !fristName.equals(doctor.getFirstName())) {
                flag = false;
            }
            if (lastName != null && lastName.trim().length() != 0 && !lastName.equals(doctor.getLastName())) {
                flag = false;
            }

          
            if (doctorID != null && doctorID.trim().length() != 0 && !doctorID.equals(doctor.getId()+"")) {

                flag = false;
            }

            if (minYear != 0 && doctor.getYearsOfExperience() < minYear) {
                flag = false;
            }
            if (maxYear != 0 && doctor.getYearsOfExperience() > maxYear) {
                flag = false;
            }
            if (flag) {
                result.add(doctor);
            }

        }

        showDoctors(result);


    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jTextFieldDoctorIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDoctorIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDoctorIDActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ageLabel;
    private javax.swing.JLabel ageLabel1;
    private javax.swing.JButton btnAddPatient;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnViewPatient;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JButton jButtonDiagnosisRequest;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldCommunity;
    private javax.swing.JTextField jTextFieldDoctorID;
    private javax.swing.JTextField jTextFieldFirstName;
    private javax.swing.JTextField jTextFieldHospital;
    private javax.swing.JTextField jTextFieldLastName;
    private javax.swing.JTextField jTextFieldMaxYear;
    private javax.swing.JTextField jTextFieldMinYear;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JLabel streetLine1Label;
    private javax.swing.JTable tblDoctors;
    // End of variables declaration//GEN-END:variables

    public void populateDoctorTable() {

        HashMap<Integer, Doctor> doctorMap = admin.doctorDirectory.getDoctorMap();

        ArrayList<Doctor> result = new ArrayList<Doctor>();

        for (Doctor doctor : doctorMap.values()) {
            result.add(doctor);
        }

        showDoctors(result);

    }

    public void showDoctors(ArrayList<Doctor> doctors) {
        DefaultTableModel model = (DefaultTableModel) tblDoctors.getModel();
        model.setRowCount(0);
        Collections.sort(doctors);
        for (Doctor d : doctors) {
            Object[] row = new Object[7];
            row[0] = d;  // override the method to show id
            row[1] = d.getFirstName();
            row[2] = d.getLastName();
            row[3] = d.getHospitalName();
            row[4] = d.getMedicalDepartment();
            row[5] = d.getCommunity();
            row[6] = d.getYearsOfExperience();
            model.addRow(row);
        }

    }

}
